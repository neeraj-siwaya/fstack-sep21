When a class is loaded, following tasks are performed by JRE:

1. Static data members if defined in the class, are created in the class area.
2. Static block if defined in the class, is executed.
3. The task because of which the class is loaded, is performed.


In a class,order of members doesn't matter i.e. members in a class can be defined in any order but the 
order of statements in a method or constructor matters. Statements are executed in the order they
are defined.

Argument Passing mechanism of Java:
1. Primitive arguments (char, int, short, long, byte, float, double and boolean) 
are passed by value i.e. their copy is created in the invoked method.
2. Objects are passed by references i.e. same object is refered by another
name in the invoked method.

We can use the following examples to understand the differences of these two approaces:

Problem statement: 
1. Define a class named Swapper which has a method named swap to swap two integers.
2. Define another class named SwapperTest which has main() method. In the main() method, 2 integers
are created and initialized and swapped using the swap() method of the Swapper class.

As seen in the last example we can't get the values of two integers swapped through a method because
copy of integers is passed to the method. 
If want to swap them, we need to convert integer values to objects because when objects are passed to
methods their copy is not created.
To convert integers to objects we can define a class as follows:


this keyword: 

In Java, each non static method and constructor has an implicit parameter (which is not defined but can be used)
by the name this. It receives the reference of the invoking object in the method.
It has following uses:

1. It is used to refer data members of the object in case local variables and data members have same name.
syntax of referencing the data members of the invoking object:

this.memberName

2. It is used for intra-class (within class) constructor chaining.
Constructor chaining is the facility of invoking a constructor from another constructor. Intra-class constructor 
chaining is used when there are multiple constructors in a class i.e. constructors are overloaded.
If we have n datamembers and m constructors in a class then without constructor chaining, n*m statements
are required for initialization.
With the help of constructor chaining, these statements can be reduced to n+m-1.

syntax of invoking a same class constructor from another constructor:
this(arguments if any); // It must be the first statement of the invoking constructor

3. It is used for method chaining

Method chaining is the facility of invoking multiple methods on an object in a single statement.

e.g. obj be an object on which m1(), m2() and m3() methods are to be invoked.
Without method chaining:
obj.m1();
obj.m2();
obj.m3();

With method chaining:
obj.m1().m2().m3();



Sep 18, 2021

Relation b/w classes can be of two types:

Is-A Relation
Has-A Relation

e.g. 
Car is a Vehicle, is an example of Is-A relation.
Car has engine, is an example of Has-A relation.

Today, we will explore Is-A relation.

Is-A relation is implemented with the help of inheritance i.e. if a class inherits anohter class then
Is-A relation is created b/w them.

In Java, extends keyword is used for inheritance.

syntax:

class ClassName extends SuperClassName{

    Additional methods
       or
    Additional data members and methods   
}

e.g. class A{

    public void one(){
        System.out.println("It is one of A");
    }
}

class B extends A{
    public void two(){
        System.out.println("It is two of B");
    }
}

Here B is inheriting A i.e. we can use one() as well two() methods with the object of B.
Inheritance is used for code reusability and run time polymorphism.

Inheritance can be of different types such as:

1. Multiple Inheritance
2. Multilevel Inheritance
3. Hybrid Inheritance

When a class extends more than one classes, it is known as multiple inheritance. In Java,
Multiple inheritance is not supported.

we can't do the following in Java:

class X{
    // some members
   
}

class Y{
    // some members
    
}

class Z extends X,Y{
    //won't compile

}

When a class extends another class which extends another class and so on then it is known as Multilevel
inheritance.

Utility of inheritance can be understood with the help of following example:

Problem Statement:

We need to define Rectangle and Cuboid classes to represent rectangles and cuboids as objects.

There can be following approaches:

1. Independent classes are defined for Rectangle and Cuboid
2. Both Rectangle and Cuboid have length & breadth, we can define a common class for length and breadth
and can inherit it in both Rectangle and Cuboid. 

class Common{

    int length, breadth;

    public Common(int l, int b){
        length =l;
        breadth =b;
    }
    public void display(){
        System.out.println("Lenght: "+length);
        System.out.println("Breadth: "+breadth);
    }
}

class Rectangle extends Common{

    public Rectangle(int l, int b){
        super(l,b); // Parent class constructor is inovked
    }
    //Additonal behaviour is defiend
    public int area(){
        return length * breadth;
    }
    public int perimeter(){
        return 2*(length * breadth);
    }
}

class Cuboid extends Common{

// additional attribute is defined
    int height;

    public Cuboid(int l, int b, int h){
        super(l,b); // Parent class constructor is inovked
        height = h;
    }
//Additonal behaviour is defiend
public void display(){
        super.display(); // Super class method is invoked.
        System.out.println("height: "+height);
    }
 public int volume(){
     return length * breadth * height;
 }   
}

public class InheritanceTest{
    public static void main(String arr[]){
        System.out.println("Creating Rectangle object r...");
        Rectangle r = new Rectangle(4,5);
         System.out.println("Creating Cuboid object c...");
        Cuboid c = new Cuboid(10, 20, 30);
        System.out.println("Dimension of Rectangle");
        r.display();
         System.out.println("Dimension of Cuboid");
        c.display();
        System.out.println("Area of Rectangle is: "+r.area());
        System.out.println("Volume of Cuboid is: "+c.volume());
    }
} 


Uses of super keyword:

1. It is used to inovke super class constructor from a sub class constructor.

syntax:  super(args if any);

Note- It must be the first statement of a sub class constructor.

2. It is used to invoke a super class method from a sub class method.

syntax: super.methodName(args if any);

3. It is used to refer super class data members in a subclass when there is a 
name conflict b/w super class and sub class data members.

syntax: super.memberName


Method Overriding: When a sub class defines a method having the same
signature as a method of its super class then the sub class is said to 
be Overriding the method of its super class.

Method Overriding is one of the means of implementing polymorphism. Methods are
overridden by sub classes to perform a task in different way than their parent class.

In our example, Cuboid class is Overriding the display() method.

Sep 19, 2021

When a class inherits another class then in addition to the features, it also inherits the
name of its super class i.e. Objects of subclass can be referenced by the name of super class.

e.g. let there be following classes:

class A {

}

class B extends A{

}

class C extends B {

}

Objects of these classes can be referenced as follows:

ObjectType              ReferenceType
1. A                     A, Object
e.g. A x = new A();
     Object y = new A();

2. B                     B, A, Object 
e.g. B x = new B();
     A y = new B();
     Object z = new B();

3. C                    C, B, A, Object
e.g. C x = new C();
     B y = new C();
     A z = new C(); 
     Object o = new C();


In java, each class is inherited from java.lang.Object class i.e. Object is the implicit super class 
of all java classes. It contains  attributes and behaviour common to all java objects.

Each time object of any class is created, it inherits the featurs of all its parent classes up to the
object class which means whenever the object is created all the constrcturs starting from the Object
class up to the instiated class must be executed so that the object is properly initialized.

At the time of compilation, compiler checks each class for constrctur chaining with Object class.
If chaining is not there then compilation error is generated.

Object class has only a default constrctur so if a class doesn't explictly invoke super()/this() from
its constrcturs then compiler adds super() as the first statement to all the constrcutors of the class.


Find out the output of following classes:

class A{
    
    public A(){
        System.out.println("In A.");
    }
}

class B extends A{
    
}
public class C extends B {
    public C(){
        System.out.println("In C.");
    }
    public static void main(String args[]) {
     A x = new A();
     B y = new B();
     C z = new C();
      
    }
}


Again find out the output?

class A{
    
    public A(){
        System.out.println("In A.");
    }
}

class B extends A{
    int x;
    public B(int x){
        this.x=x;
        System.out.println("In B");
    }
}
public class C extends B {
    public C(){
        System.out.println("In C.");
    }
    public static void main(String args[]) {
     A x = new A();
     B y = new B(5);
     C z = new C();
      
    }
}

Again, find out the output?

class A{
    
    public A(){
        System.out.println("In A.");
    }
}

class B extends A{
    int x;
    public B(int x){
        this.x=x;
        System.out.println("In B");
    }
    
}
public class C extends B {
    public C(){
        super(5);
        System.out.println("In C.");
    }
    public static void main(String args[]) {
     A x = new A();
     B y = new B(5);
     C z = new C();
      
    }
}

And, again find out the output?

class A{
    
    public A(){
        System.out.println("In A.");
    }
}

class B extends A{
    private int x;
    public B(int x){
        this.x=x;
        System.out.println("In B");
    }
    public B(){
        System.out.println("In B default");
    }
}
public class C extends B {

    public C(){
        System.out.println("In C.");
    }
    public static void main(String args[]) {
     A x = new A();
     B y = new B(5);
     C z = new C();
      
    }
}



Static & Dynamic binding:

At the time of compilation, compiler links each method call to a method definition. This 
process is known as binding.

If the compiler is able to bind a method call then it is known as static or early binding.
Sometimes due to some ambiguity, compiler is not able to bind a method call and defers it
till the time of execution. At the time of execution, JRE binds the method call to a 
definition. It is known as dynamic or late binding.

How method calls are binded:

1. If a call has only one interpretation and will continue to have only one interpretation 
in future, it is statically binded.

2. If a call has multiple interpretations or may have multiple interpretations in future then 
it is dynamically binded.

Compiler uses following rules for deciding binding:

1. Calls of constrcturs are statically binded.
2. Calls of private methods are statically binded
3. Calls of static methods are statically binded
4. Calls which are made using super keyword (super.methodName()) are statically binded.
5. All other calls are dynamically binded.

following example can be used to understand static & dynamic binding:

class A{
    public void display()
    {
        System.out.println("In A");
    }
    public void display(String str){
        System.out.println(str);
    }
    public static void invoke(A obj){
       obj.display(); //Will be dynamically binded
    }
}
class B extends A{
    public void display()
    {
        System.out.println("In B");
    }
}


public class Invoker {
    
     public static void main(String args[]) {
     A x = new A();
     A.invoke(x);//Will be statically binded
     A y = new B();
     A.invoke(y);//Will be statically binded
    }
}

Sep 25, 2021.

abstract keyword: Is used to define abstract classes and methods. An abstract method is method
without implementation. It represent what is to be done but doesn't specify how it should be done.

Abstract methods are used by parent classes when they want all their sub classes to some task in their
own way.

If a class contains any abstract method then it is declared as an abstract class.

An abstract class can't be instantiated i.e. its object can't be created. Whenever a class extends
an abstract class then it has to define all the abstract methods of the super class otherwise it also
need to be declared as abstract.

e.g. Let there be a family, which has two common functionality a() & b(). Implementation of a() is known
in advance but implementation of b() is not. b() implementation can vary from member to member. 
We can defien our family as follows:

abstract class AB{

public void a() // definition
{
    System.out.println("It is gifted to all members by the parent class.");
}
abstract void b(); // declaration
}

class ABC extends AB{
    // won't compile because it extends A but doesn't define b() method.
}

class ABD extends AB{
    public void b(){
        System.out.println("Child is forced to implement this feature");
    }
}


final keyword: It has following uses:

1. It is used to prevent overridden of methods by subclasses.

syntax:

public class XY
{

    public void x(){
        System.out.printl("It can be overridden by subclasses");
    }
    final public void y(){
        System.out.printl("It can't be overridden by subclasses");
    }
}

class XYZ extends XY{
    public void y(){
        System.out.printl("It won't compile.");
    }
}

2. It is used to prevent inheritance from a class.

e.g.

public final class X{
    // it can't be extended
}

public class Y extends X{
    //won't compile
}

3. It is used to define named constants.

A named constant is variable value of which can't be changed.

Syntax: final type varName = value;

e.g. final double pi = 3.14;
   pi = pi + 1; // won't compile.

Uses of abstract, final and dynamic binding can be understood with the help of following example:

Let XYZ by a bank which currently provides the facility of opening saving, current, RD & FD accounts to
its customers. Each quarter bank need to credit interest to the accounts of all the customers. The back
wants us to automate this process.

Following are the additional requirements of the bank.

1. Bank may launch new account types in future and may stop operating current account types.
2. Differnt account types have different interest rates which change as per the policy of the 
central bank of the country e.g. RBI in india.
3. Each month statement of all accounts should be generated in the following standard format:

AccountName: ABC
AccountType: Saving/Current/RD/FD
Balance:  ****
InterestRate: **

The bank want us to write such code that no modification is required when the above requirements change.


The above requirements can be fulfilled as follows:

abstract class Account{

    private String name;
    private double balance;

    public Account(String name, double balance){
        this.name=name;
        this.balance=balance;
    }
    // To make sure that each account has interest rate
    public abstract double getInterestRate();

    // To generate statement of all accounts in a standard format
    public final void display(){
        System.out.println("AccountName: "+name);
        System.out.println("Account Type: "+this.getClass().getName()); // Feature of parent
        System.out.println("Balance: "+balance);
        System.out.println("Interest Rate: "+this.getInterestRate()); // Feature of children
    }
}

public class Saving extends Account{

    public Saving(String name, double balance){
        super(name, balance);
    }
    
    public double getInterestRate(){
        return 3.5;
    }

}

public class Current extends Account{

    public Current(String name, double balance){
        super(name, balance);
    }
    
    public double getInterestRate(){
        return 1;
    }

}

public class RD extends Account{

    public RD(String name, double balance){
        super(name, balance);
    }
    
    public double getInterestRate(){
        return 5;
    }

}

public class FD extends Account{

    public FD(String name, double balance){
        super(name, balance);
    }
    
    public double getInterestRate(){
        return 7.25;
    }

}

public class AccountTest{

    public static void main(String arr[]){
        System.out.println("Creating some accounts...");
        Saving one = new Saving("Amit", 10000);
        Current two = new Current("XYZ Copr.", 1000000);
        RD three = new RD("Ravi", 25000);
        FD four = new FD("Sachin", 250000);
        System.out.println("Statement of account one...");
        one.display();
        System.out.println("Statement of account two...");
        two.display();
        System.out.println("Statement of account three...");
        three.display();
        System.out.println("Statement of account four...");
        four.display();

    }
}

Sep 26, 2021.

Interface: An interface is a collection of implict abstract methods and static final data members.
It can't be instantiated but its reference variable can be created. Interfaces facilitate runtime 
polymorphism.

Interfaces are implemented by classes. When a class implements an interface it need to define all 
the interface methods otherwise it need to be declared as abstract.

syntax of defining an interface:

interface InterfaceName{
    implicit abstract methods
          or
    static final data members
          or
    both            
}

e.g. interface AB{
    void a();
    void b();
}

Both the methods of AB are by default public and abstract.

syntax of implementing an interface:

class ClassName implements InterfaceName, ...
{

    public definition of all the interfaces methods
    other members of the class if any
}

e.g.

class One implements AB{
    public void a(){
        System.out.println("a() of One");
    }
    public void b(){
        System.out.println("b() of One");
    }
}

Notes: A class can implement any number of interfaces.

In order to understand the use of interfaces, we need to understand inheritance types.

Inheritance can be of two types:

1. Feature based inheritance
2. Role based inheritance

Feature based inheritance: In feature based inheritance both features and name are inherited. Features 
facilitate code reusability and name facilitate run time polymorphism. It isfacilitated by extends 
keyword. In real life, we can inherit both name and features from a single family only i.e. 
multiple feature based inheritance is not supported in real life
hence it is not supported in java as well.

Role based inheritance: Only name is inherited which represents the role. Its only purpose is
runtime polymorphism. In real life, we can play multiple roles i.e. multiple role based inheritance
is supported in real life hence it is supported in java as well through interfaces.

Interfaces are required only when there are at least two parties, referencing party (Yashoda, Rada, Arjun etc)
and referenced party (Krishna).

There are only two scenarios in which interfaces are used:

1. A referenced party want to hide some of its functionality from the referencing parties.
2. Referencing parties are interested only in a limited functionality of a referenced party.

Scenario 1 can be understood with the help of following example:

Let assume that there are three programmers A, B & C. A has a class named PQR which has p(), q()
and r() methods. A want to expose only p() to the class of B and only q() to the class of C.

A can do it as described in the diagram.

Oct 3, 2021

Scenario 2: We will se the example of second Scenario when we will study multithreading.

Has-A relation: When a class has object or objects of another class as a member then Has-A relation
is created.

Has-A relation can be of two types:

1. Aggeragation
2. Composition

Aggeragation represents part and whole relation. It is a weaker relation in the sense that in it
either part or whole or both may have their Independent existence.

e.g. Room has fans. Room has chairs etc.

Composition represents madeup of relation. It is a stronger relation in the sense that in it 
existence of both the parties depends on each other.

e.g. Room has roof. Room has walls.

Aggeragation is represented by using an object or objects of a class as a member in another class.

e.g. 

System class has an object out of PrintStream class as its member to represent system has output device
relation.

Following example demonstrate the use of Aggeragation:

public class Fan{

    private String brand;
    private String type;

    public Fan(String b, String t){
        brand = b;
        type =t;
    }

    public String toString(){
        return type+" fan of "+brand;
    }
}

public class Room {
    
    private String name;
    private Fan fan;


    public Room(String n, Fan f){
        name=n;
        fan =f;
    }
    public void display(){
        System.out.println("It is a "+name+" room.");
        //System.out.print("It has a ");
        //fan.display();
        System.out.println("It has "+fan);
    }
}

public class AggregationTest {
    public static void main(String arr[]){

        Room r1 = new Room("Living", new Fan("Usha","Ceiling"));
        Room r2 = new Room("Study", new Fan("Crompton","Table"));
        System.out.println("Details of room one...");
        r1.display();
        System.out.println("Details of room two...");
        r2.display();
    }
}


In the above example, we have also introdue the toString() method which is used by the
print() and println() methods to print an object i.e. if we want to print object of any class
just like primitive values and strings, we need to override toString() method in our class.

Whenever the object of a class is passed to print() or println() method, it is converted into a string
with the help of toString() and the string is printed.

Composition is implemented with the help of nested or inner classes. When a class is defined
within the scope of another class, it is known as nested or inner class.

e.g.

public class A{

   public class B{


   }
}

Here class B is defined within the scope of class A i.e. B is nested within A. Nested classes don't 
have Independent existence and can't be directly referenced.
They are referenced as a member of outer class using the following syntax:

outerClassName.innerClassName

e.g. A.B (B of A)

Members of a class can be of two types: static & non-static which means an inner class can be
static as well as non-static.

e.g. 
public class A{

   public static class B{


   }

   public class C{


   }
}

Here A.B is a static member and A.C is a non-static member.


